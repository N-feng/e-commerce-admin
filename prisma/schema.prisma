// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  userId          String
  billboards      Billboard[]   @relation("StoreToBillboard")
  categories      Category[]    @relation("StoreToCategory")
  products        Product[]     @relation("StoreToProduct")
  sizes           Size[]        @relation("StoreToSize")
  kitchens        Kitchen[]     @relation("StoreToKitchen")
  cuisines        Cuisine[]     @relation("StoreToCuisine")
  colors          Color[]       @relation("StoreToColor")
  orders          Order[]       @relation("StoreToOrder")
  recipes         Recipe[]      @relation("StoreToRecipe")
  meals           Meal[]        @relation("StoreToMeal")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Billboard {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      @db.ObjectId // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    @db.ObjectId // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       String
  qty         Int
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    @db.ObjectId // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  kitchenId   String    @db.ObjectId // Foreign Key to Kitchen
  kitchen     Kitchen   @relation(fields: [kitchenId], references: [id])
  cuisineId   String    @db.ObjectId // Foreign Key to Cuisine
  cuisine     Cuisine   @relation(fields: [cuisineId], references: [id])
  // colorId     String    @db.ObjectId // Foreign Key to Color
  // color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  recipeItems RecipeItem[]  // Relation to Recipe model
  meals       MealItem[]  // Relation to Meal model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Attribute
  energy        String
  carbohydrates String
  sugars        String
  dietaryFiber  String
  fat           String
  protein       String

  // Vitamins
  vitaminA          String
  thiamineB1        String
  riboflavinB2      String
  niacinB3          String
  pantothenicAcidB5 String
  vitaminB6         String
  folateB9          String
  vitaminC          String
  vitaminE          String
  vitaminK          String

  // Minerals
  calcium     String
  iron        String
  magnesium   String
  manganese   String
  phosphorus  String
  potassium   String
  sodium      String
  zinc        String

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([kitchenId])
  @@index([cuisineId])
  // @@index([colorId])
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  order_status String @default("")
  userId String @default("")

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Recipe {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToRecipe", fields: [storeId], references: [id])
  repiceItems RecipeItem[] // Relation to OrderItem model
  name        String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @default("")
  meals       MealItem[]  // Relation to Meal model

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model RecipeItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  recipeId  String  @db.ObjectId // Foreign Key to Order
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([recipeId])
  @@index([productId])
}

model Meal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToMeal", fields: [storeId], references: [id])
  mealItems   MealItem[] // Relation to OrderItem model
  name        String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @default("")

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model MealItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  mealId    String  @db.ObjectId // Foreign Key to Order
  meal      Meal    @relation(fields: [mealId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  recipeId  String  @db.ObjectId // Foreign Key to Product
  recipe    Recipe @relation(fields: [recipeId], references: [id])

  @@index([mealId])
  @@index([productId])
}

model Size {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       Int
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}
model Kitchen {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToKitchen", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}
model Cuisine {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToCuisine", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  // products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}
